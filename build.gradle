// 책에 비해 Gradle Version이 높아지면서
// buildscript + apply plugin이 plugins + version으로 통합 되었습니다.
plugins {
    id 'java'
    id 'eclipse'
    id 'org.springframework.boot' version '2.3.12.RELEASE'
    // io.spring.dependency-management 플러그인은 Spring Boot의 의존성을 관리해 주는 플러그인
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

group 'com.alphacoder.book'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

// 각종 의존성들을 어떤 원격 저장소에서 받을지를 정합니다.
dependencies {
    // compile, runtime, testCompile, testRuntime은 gradle 4.10(2018.08.27) 이래로 deprecate되고
    // gradle 7.0 (2021.4.9) 부터 delete 되었습니다.
    // 필자는 현재 gradle 7.4 버전을 사용중이기에 delete된 명령어 대신 대체된
    // implementation, runtimeOnly, testImplementation, testRuntimeOnly로 대체 하여 사용하였습니다.
    implementation('org.springframework.boot:spring-boot-starter-web')

    // lombok 라이브러리 추가
    implementation('org.projectlombok:lombok')
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    // 스프링 부트용 Spring Data Jpa 추상화 라이브러리로 스프링 부트 버전에 맞춰 자동으로 JPA 관련 라이브러리들의 버전을 관리 해줍니다.
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')

    /*
        h2 는 인메모리 관계형 데이터 베이스로 별도의 설치가 필요 없이 프로젝트 의존성만으로 관리가 가능합니다.
        인메모리라는 단어답게 메모리에서 실행되기 때문에 애플리케이션이 재시작할 때마다 초기화 된다는 점을 이용해 테스트시 많이 사용됩니다.
     */
    implementation('com.h2database:h2')
}
repositories {
    mavenCentral()
    // 라이브러리 업로드 난이도로 인해 최근 mavenCentral보다 각광받는 저장소입니다.
    jcenter()
}

//프로젝트 개발에 필요한 의존성들을 선언하는 곳입니다.